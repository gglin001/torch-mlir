module {
  func.func @main(%arg0: !torch.vtensor<[1,56,56,128],f32>) -> !torch.vtensor<[1,56,56,128],f32> {
    %0 = torch_c.to_builtin_tensor %arg0 : !torch.vtensor<[1,56,56,128],f32> -> tensor<1x56x56x128xf32>
    %int0 = torch.constant.int 0
    %int0_0 = torch.constant.int 0
    %int9223372036854775807 = torch.constant.int 9223372036854775807
    %int1 = torch.constant.int 1
    %int1_1 = torch.constant.int 1
    %int3 = torch.constant.int 3
    %1 = torch_c.to_i64 %int3
    %int9223372036854775807_2 = torch.constant.int 9223372036854775807
    %2 = torch_c.to_i64 %int9223372036854775807_2
    %int1_3 = torch.constant.int 1
    %3 = torch_c.to_i64 %int1_3
    %c1 = arith.constant 1 : index
    %dim = tensor.dim %0, %c1 : tensor<1x56x56x128xf32>
    %4 = arith.index_cast %dim : index to i64
    %c0_i64 = arith.constant 0 : i64
    %5 = arith.subi %c0_i64, %4 : i64
    %6 = arith.maxsi %5, %1 : i64
    %7 = arith.minsi %4, %6 : i64
    %8 = arith.addi %4, %7 : i64
    %9 = arith.cmpi sge, %7, %c0_i64 : i64
    %10 = arith.select %9, %7, %8 : i64
    %c0_i64_4 = arith.constant 0 : i64
    %11 = arith.subi %c0_i64_4, %4 : i64
    %12 = arith.maxsi %11, %2 : i64
    %13 = arith.minsi %4, %12 : i64
    %14 = arith.addi %4, %13 : i64
    %15 = arith.cmpi sge, %13, %c0_i64_4 : i64
    %16 = arith.select %15, %13, %14 : i64
    %c0 = arith.constant 0 : index
    %dim_5 = tensor.dim %0, %c0 : tensor<1x56x56x128xf32>
    %17 = arith.index_cast %dim_5 : index to i64
    %c1_6 = arith.constant 1 : index
    %dim_7 = tensor.dim %0, %c1_6 : tensor<1x56x56x128xf32>
    %18 = arith.index_cast %dim_7 : index to i64
    %c2 = arith.constant 2 : index
    %dim_8 = tensor.dim %0, %c2 : tensor<1x56x56x128xf32>
    %19 = arith.index_cast %dim_8 : index to i64
    %c3 = arith.constant 3 : index
    %dim_9 = tensor.dim %0, %c3 : tensor<1x56x56x128xf32>
    %20 = arith.index_cast %dim_9 : index to i64
    %c0_i64_10 = arith.constant 0 : i64
    %c1_i64 = arith.constant 1 : i64
    %21 = arith.cmpi eq, %16, %c0_i64_10 : i64
    %22 = arith.select %21, %18, %16 : i64
    %from_elements = tensor.from_elements %c0_i64_10, %10, %c0_i64_10, %c0_i64_10 : tensor<4xi64>
    %from_elements_11 = tensor.from_elements %17, %22, %19, %20 : tensor<4xi64>
    %from_elements_12 = tensor.from_elements %c1_i64, %3, %c1_i64, %c1_i64 : tensor<4xi64>
    %23 = stablehlo.real_dynamic_slice %0, %from_elements, %from_elements_11, %from_elements_12 : (tensor<1x56x56x128xf32>, tensor<4xi64>, tensor<4xi64>, tensor<4xi64>) -> tensor<1x53x56x128xf32>
    %24 = torch_c.from_builtin_tensor %23 : tensor<1x53x56x128xf32> -> !torch.vtensor<[1,53,56,128],f32>
    %int2 = torch.constant.int 2
    %int0_13 = torch.constant.int 0
    %int9223372036854775807_14 = torch.constant.int 9223372036854775807
    %int1_15 = torch.constant.int 1
    %int3_16 = torch.constant.int 3
    %int0_17 = torch.constant.int 0
    %int9223372036854775807_18 = torch.constant.int 9223372036854775807
    %int1_19 = torch.constant.int 1
    %int0_20 = torch.constant.int 0
    %int0_21 = torch.constant.int 0
    %int9223372036854775807_22 = torch.constant.int 9223372036854775807
    %int1_23 = torch.constant.int 1
    %int1_24 = torch.constant.int 1
    %int0_25 = torch.constant.int 0
    %25 = torch_c.to_i64 %int0_25
    %int3_26 = torch.constant.int 3
    %26 = torch_c.to_i64 %int3_26
    %int1_27 = torch.constant.int 1
    %27 = torch_c.to_i64 %int1_27
    %c1_28 = arith.constant 1 : index
    %dim_29 = tensor.dim %0, %c1_28 : tensor<1x56x56x128xf32>
    %28 = arith.index_cast %dim_29 : index to i64
    %c0_i64_30 = arith.constant 0 : i64
    %29 = arith.subi %c0_i64_30, %28 : i64
    %30 = arith.maxsi %29, %25 : i64
    %31 = arith.minsi %28, %30 : i64
    %32 = arith.addi %28, %31 : i64
    %33 = arith.cmpi sge, %31, %c0_i64_30 : i64
    %34 = arith.select %33, %31, %32 : i64
    %c0_i64_31 = arith.constant 0 : i64
    %35 = arith.subi %c0_i64_31, %28 : i64
    %36 = arith.maxsi %35, %26 : i64
    %37 = arith.minsi %28, %36 : i64
    %38 = arith.addi %28, %37 : i64
    %39 = arith.cmpi sge, %37, %c0_i64_31 : i64
    %40 = arith.select %39, %37, %38 : i64
    %c0_32 = arith.constant 0 : index
    %dim_33 = tensor.dim %0, %c0_32 : tensor<1x56x56x128xf32>
    %41 = arith.index_cast %dim_33 : index to i64
    %c1_34 = arith.constant 1 : index
    %dim_35 = tensor.dim %0, %c1_34 : tensor<1x56x56x128xf32>
    %42 = arith.index_cast %dim_35 : index to i64
    %c2_36 = arith.constant 2 : index
    %dim_37 = tensor.dim %0, %c2_36 : tensor<1x56x56x128xf32>
    %43 = arith.index_cast %dim_37 : index to i64
    %c3_38 = arith.constant 3 : index
    %dim_39 = tensor.dim %0, %c3_38 : tensor<1x56x56x128xf32>
    %44 = arith.index_cast %dim_39 : index to i64
    %c0_i64_40 = arith.constant 0 : i64
    %c1_i64_41 = arith.constant 1 : i64
    %45 = arith.cmpi eq, %40, %c0_i64_40 : i64
    %46 = arith.select %45, %42, %40 : i64
    %from_elements_42 = tensor.from_elements %c0_i64_40, %34, %c0_i64_40, %c0_i64_40 : tensor<4xi64>
    %from_elements_43 = tensor.from_elements %41, %46, %43, %44 : tensor<4xi64>
    %from_elements_44 = tensor.from_elements %c1_i64_41, %27, %c1_i64_41, %c1_i64_41 : tensor<4xi64>
    %47 = stablehlo.real_dynamic_slice %0, %from_elements_42, %from_elements_43, %from_elements_44 : (tensor<1x56x56x128xf32>, tensor<4xi64>, tensor<4xi64>, tensor<4xi64>) -> tensor<1x3x56x128xf32>
    %48 = torch_c.from_builtin_tensor %47 : tensor<1x3x56x128xf32> -> !torch.vtensor<[1,3,56,128],f32>
    %int2_45 = torch.constant.int 2
    %int0_46 = torch.constant.int 0
    %int9223372036854775807_47 = torch.constant.int 9223372036854775807
    %int1_48 = torch.constant.int 1
    %int3_49 = torch.constant.int 3
    %int0_50 = torch.constant.int 0
    %int9223372036854775807_51 = torch.constant.int 9223372036854775807
    %int1_52 = torch.constant.int 1
    %49 = torch.prim.ListConstruct %24, %48 : (!torch.vtensor<[1,53,56,128],f32>, !torch.vtensor<[1,3,56,128],f32>) -> !torch.list<vtensor>
    %int1_53 = torch.constant.int 1
    %50 = torch_c.to_builtin_tensor %24 : !torch.vtensor<[1,53,56,128],f32> -> tensor<1x53x56x128xf32>
    %51 = torch_c.to_builtin_tensor %48 : !torch.vtensor<[1,3,56,128],f32> -> tensor<1x3x56x128xf32>
    %52 = stablehlo.concatenate %50, %51, dim = 1 : (tensor<1x53x56x128xf32>, tensor<1x3x56x128xf32>) -> tensor<1x56x56x128xf32>
    %53 = torch_c.from_builtin_tensor %52 : tensor<1x56x56x128xf32> -> !torch.vtensor<[1,56,56,128],f32>
    return %53 : !torch.vtensor<[1,56,56,128],f32>
  }
}

